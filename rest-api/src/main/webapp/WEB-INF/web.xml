<web-app
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

    <display-name>paas_manager-server</display-name>

    <resource-ref>
        <description>paas_manager Datasource</description>
        <res-ref-name>jdbc/paasmanager</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <!--  SPRING -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener
        </listener-class>
    </listener>
    <!-- END SPRING -->

   
    <!-- This way can see lazy initialized objects -->
    <filter>
        <filter-name>jpaFilter</filter-name>
        <filter-class>
            org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
        </filter-class>
        <init-param>
            <param-name>entityManagerFactoryBeanName</param-name>
            <param-value>entityManagerFactory</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>jpaFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- The CORS filter with parameters -->
    <filter>
        <filter-name>CORS</filter-name>
        <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
        
        <init-param>
            <param-name>cors.allowOrigin</param-name>
            <!-- ACHTUNG!!!! In production environment param-value must be -->
            <!-- ACHTUNG!!!! http://130.206.80.93                          -->
            <param-value>*</param-value>
        </init-param>
        <init-param>
            <param-name>cors.supportedHeaders</param-name>
            <param-value>Content-Type,Accept-Type,X-Auth-Token,Origin,Accept</param-value>
        </init-param>
        
    </filter>  
    <filter-mapping>
        <filter-name>CORS</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping> 
    
    <!-- Jersey Servlet  -->
     <servlet>
        <servlet-name>Paas Manager Server Rest Servlet</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet
        </servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>Paas Manager Server Rest Servlet</servlet-name>
          <url-pattern>/rest/*</url-pattern>
        <!-- <url-pattern>/*</url-pattern> -->
     </servlet-mapping>

    <!-- SPRING SECURITY -->
     <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name> 
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- BOOTSTRAP ACTIONS -->
    <!-- Init the db with some "fake" data...Delete this when preconditions
     are implemented -->
     <listener>
        <listener-class>
            com.telefonica.euro_iaas.paasmanager.bootstrap.InitDbBootstrap
        </listener-class>
    </listener>
   
    <!-- init the properties -->
    <listener>
        <listener-class>
            com.telefonica.euro_iaas.paasmanager.bootstrap.PropertiesLoaderBootstrap
        </listener-class>
    </listener>
    <!-- register the properties through jmx-->
      <listener>
        <listener-class>
            com.telefonica.euro_iaas.paasmanager.bootstrap.PropertiesMBeanRegisterBootstrap
        </listener-class>
    </listener>   <!-- SECURITY -->


    <!--  ERROR PAGES -->

</web-app>
